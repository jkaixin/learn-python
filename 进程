
多进程
    
    进程间通信
    Process 之前肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。
    Python 的multiprocessing 模块包装了底层的机制，提供了Queue、Pipes等多种方式来交换数据。
    
    进程通信（IPC，InterProcess Communication）是进程进行通信和同步的机制
    
    IPC 提供两个基本操作：
    1、发送（send message）
    2、接收（receive message）
    
    进程通信流程：
    1、在通信进程之间 建立通信链路
    2、通过send/receive交换信息
    
    阻塞通信（同步）和非阻塞通信（异步）
        同步通信：
        阻塞发送/接收：发送者发送消息/接收者请求接收信息后进入等待（阻塞）知道接收接收成功/直到成功接收一条消息
        
        异步通信：
        阻塞发送/接收：发送者发送消息/接收者请求接收信息后，可立即进行其他操作
        
    通信链路缓冲：
        1、0容量：发送方必须等待接收
        2、有限容量：缓冲列队满，发送方必须等待
        3、无限容量：发送方不需要等待
        
    4种进程通信方式详解：
        从简单到复杂：
        1、管道(pipe)
            普通管道 PIPE：通常有两种限制，一是单工，只能单向传输；二是只能在父子或者兄弟进程间使用；
            
            流管道 s_pipe：去除了第一种限制，为半双工，只能在父子或者兄弟进程间使用，可以双向传输；
            
            命名管道 name_pipe：去除了第2种限制，可以在许多并不相关的进程之间进行通讯。
         
         2、信号量（semophore）
            信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它通常作为一种锁机制，防止某个进程正在访问共享资源时，
            其他进程也访问该资源。因此，主要作为进程间以及同一进程之间的同步手段；
            
         3、消息列队（message queue）
            消息列队是有消息的链表，存放在内核中并有消息队列标识符标识。消息列队克服了信号传递信息少、管道只能承载无格式字节流以及缓冲
            区大小受限的缺点；
            
         4、信号（sinal）
            信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；
            
         5、共享内存（shared memory）
            共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的IPC方式，
            它是针对其他进程进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号，配合使用，来实现进程间的同步和通信；
            
         6、套接字（socket）
            套解口也是一种进程间通信机制，与其他通信机制不同的是，它可以用于不同机器间的进程通信。
            
    multiprocessing Queue
        Queue[maxsize]
            创建共享的进程列队。maxsize 是列队中允许的最大项数。如果省略此参数或者传入负数，则表示无大小限制。底层列队使用管道和锁定实现。
            
            支持的方法：
            Queue.cancle_join_thread()
            不会在进程退出的时候自动连接后台线程。可以防止join_thread()方法阻塞。
            
            Queue.close()
            关闭列队，防止列队中加入更多数据。
            
            Queue.empty()
            调用此方法时列队为空，则放回True，否则放回False；如果其他进程或者线程正在往列队中添加项目，则结果不可靠。
            
            Queue.full()
            如果列队已满，则返回True；也是不可靠
            
            Queue.get(block,timeout)
            取出列队中的一个项目。如果列队为空，此方法将阻塞，直到列队中有项目可用为止。block用于控制阻塞行为，默认为True。如果改为False，会引发
            Queue.Empty 异常；timeout 是可选的超时时间，用于阻塞模式中，如果在指定的时间内没有项目可用，将引发Queue.Empty异常。
            
            Queue.get_nowait() 同Queue.get(False)方法
            
            Queue.join_thread()
            连接列队的后台线程。此方法用于在调用Queue.close()方法后，等待所有列队项被消耗。默认情况下，此方法由不是列队创建者的进程调用，
            调用Queue.cancel_join_thread()方法可以禁止这种行为。
            
            Queue.put(block,timeout) 参考Queue.get()，只不过引发Queue.Full异常。
            
            Queue.qsize() 返回列队中目前项目的数量
            
            Queue.task_done()
            使用者使用此方法发出信号，表示get()返回的项目已经被处理。如果调用此方法的次数大于从列队中删除的数量，将引发ValueError异常。
            
            Queue.join()
            生产者使用此方法进行阻塞，直到列队中所有项目均被处理。阻塞将持续到为列队中的每个项目均调用task_done()方法为止；
        
