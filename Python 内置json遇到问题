
    学习序列化时，在测试python内置 json模块的dump方法时，报错如下：
    
    >>> d = dict(name='bill',age=20,score=88)
    >>> f = open('F:\Python Code\dump1.txt','wb')
    >>> json.dump(d,f)
    Traceback (most recent call last):
      File "<pyshell#14>", line 1, in <module>
        json.dump(d,f)
      File "C:\Python35\lib\json\__init__.py", line 179, in dump
        fp.write(chunk)
    TypeError: a bytes-like object is required, not 'str'
    
    首选，需要弄清楚文件读写文件是怎么进行读写的；
    
    文件读写，在磁盘上读写文件的功能都是由操作系统提供的，现代的操作系统已经不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件
对象（通常称为文件描述符），然后通过操作系统提供的接口从这个文件对象中读取数据或者把数据写入这个文件对象。

    读文件：
    file-like Object
    像open()函数返回的这种有个read()方法的对象，在Python中统称file-like Object。除了file外还可以是内存的字节流、网络流、自定义流等。file-like
Object 不要求从特定的类继承，只要写个read()方法就行；

    二进制文件
    前面说的默认都是读取文本文件，且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用'rb'模式打开文件即可：
    
    
    写入文件：
    写文件与读文件是一样的，唯一的区别是传入标识符'w'或者'wb'，写入文本文件或写二进制文件；
    
    注意事项：
    当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入
的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用with语句来得保险：
    with open('/Users/michael/test.txt', 'w') as f:
    f.write('Hello, world!')
    
    如果要写入的文件里已经有内容，希望写入的时候不覆盖已经存在的内容，可以传入标识符'a'而不是'w'.
    
    最终发现，是传入的标识符有问题；应该传入'w'，而不是'wb';w，表示写入文本文件，'wb'，表示写入二进制文件；
    
    
